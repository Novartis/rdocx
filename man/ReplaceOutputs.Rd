% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ReplaceOutputs.R
\name{ReplaceOutputs}
\alias{ReplaceOutputs}
\title{Replace Outputs in a word document}
\description{
This R6 class allows to, given a template word document and a list
of outputs, to add them at the given location in the text. It automates the
time-consuming task of adding and formatting tables and figures to a word document.
The two main inputs of the class are a template docx file, in this case a clinical
trial report and a yaml file that will contain the names of the table/figures to be replaced
and pointing to the new ones.
The yml file, should have predefined structure and parameters to be set:
\itemize{
\item type. Indicates if it is a table (TBL) or a figure (FIG)
\item title. The title or caption of the table/figure in the template docx file
\item file. The name of the file (csv or image) to be used in the new version of the docx
\item widths. For tables only, a pre-defined column widths (useful for model parameter table, for example)
\item occurrence. Int. To be used when captions are duplicated for more than one
figure/table. To set the order they appear in the word document.
}

An example of the yaml structure:

\preformatted{
output_1:
  type: TBL
  title: "Caption of the output 1"
  file: output_1.csv
  widths: ~
  occurrence: ~
output_2:
  type: FIG
  title: "Caption of the output 2"
  file: output_2.png
  }
}
\examples{

## ------------------------------------------------
## Method `ReplaceOutputs$new`
## ------------------------------------------------

uo <- ReplaceOutputs$new(
   template_docx_filename = system.file("use_cases/02_automated_reporting",
                                        "Automated_Reporting_Example.docx",
                                        package="rdocx"),
   outputs_path = system.file("use_cases/02_automated_reporting/example_outputs",
                              package="rdocx"),
   doc_final_filename = "./test.docx",
   yml_filename = system.file("use_cases/02_automated_reporting",
                              "example_yml_1.yml",
                              package="rdocx")
 )


## ------------------------------------------------
## Method `ReplaceOutputs$get_captions_to_yml`
## ------------------------------------------------

uo <- ReplaceOutputs$new(
   template_docx_filename = system.file("use_cases/02_automated_reporting",
                                        "Automated_Reporting_Example.docx",
                                        package="rdocx"),
   outputs_path = system.file("use_cases/02_automated_reporting/example_outputs",
                              package="rdocx"),
   doc_final_filename = "./test.docx"
 )
uo$get_captions_to_yml(yml_caption_filename="./test_yml.yml")


## ------------------------------------------------
## Method `ReplaceOutputs$update_all_outputs`
## ------------------------------------------------

uo <- ReplaceOutputs$new(
   template_docx_filename = system.file("use_cases/02_automated_reporting",
                                        "Automated_Reporting_Example.docx",
                                        package="rdocx"),
   outputs_path = system.file("use_cases/02_automated_reporting/example_outputs",
                              package="rdocx"),
   doc_final_filename = "./test.docx",
   yml_filename = system.file("use_cases/02_automated_reporting",
                              "example_yml_1.yml",
                              package="rdocx")
 )
uo$update_all_outputs()
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{template_docx_filename}}{Active binding for setting the path to the template docx}

\item{\code{outputs_path}}{Active binding for setting the path to the folder with the outputs}

\item{\code{doc_final_filename}}{Active binding for setting the path for the updated docx file}

\item{\code{yml_filename}}{Active binding for setting the path to the yaml file}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ReplaceOutputs-new}{\code{ReplaceOutputs$new()}}
\item \href{#method-ReplaceOutputs-get_captions_to_yml}{\code{ReplaceOutputs$get_captions_to_yml()}}
\item \href{#method-ReplaceOutputs-update_all_outputs}{\code{ReplaceOutputs$update_all_outputs()}}
\item \href{#method-ReplaceOutputs-clone}{\code{ReplaceOutputs$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReplaceOutputs-new"></a>}}
\if{latex}{\out{\hypertarget{method-ReplaceOutputs-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReplaceOutputs$new(
  template_docx_filename = NA_character_,
  outputs_path = NA_character_,
  doc_final_filename = NA_character_,
  yml_filename = NA_character_
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{template_docx_filename}}{String. File name of the template docx to be
modified. For example, "/path/to/file/filename.docx"}

\item{\code{outputs_path}}{String. Path to the folder with the outputs (figures
and tables-csvs) that will be added to the new version of the docx}

\item{\code{doc_final_filename}}{String. File name of the updated version of the
docx file. For example, "/path/to/file/filename_updated.docx"}

\item{\code{yml_filename}}{String. File name of the yaml file that will guide the
replacement of the outputs (tables and figures) in  the updated docx. For
example, "/path/to/file/filename.yml"}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{uo <- ReplaceOutputs$new(
   template_docx_filename = system.file("use_cases/02_automated_reporting",
                                        "Automated_Reporting_Example.docx",
                                        package="rdocx"),
   outputs_path = system.file("use_cases/02_automated_reporting/example_outputs",
                              package="rdocx"),
   doc_final_filename = "./test.docx",
   yml_filename = system.file("use_cases/02_automated_reporting",
                              "example_yml_1.yml",
                              package="rdocx")
 )

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReplaceOutputs-get_captions_to_yml"></a>}}
\if{latex}{\out{\hypertarget{method-ReplaceOutputs-get_captions_to_yml}{}}}
\subsection{Method \code{get_captions_to_yml()}}{
Get captions to yaml
Given a docx file, it scans the document to find the Figures and Tables captions
and provides a yaml file with all the figures and tables found. It also scans
the document for possible "Source:" which has to be after a placeholder figure/table.
If source was found, it will be added to "file" param in the yaml file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReplaceOutputs$get_captions_to_yml(yml_caption_filename)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{yml_caption_filename}}{String. File name of the newly created yaml
file that will contain the Figures and Tables of in the provided docx document.
For example, "/path/to/file/filename.yml"
It will follow the required format for the replacement of the outputs (tables
and figures) to update docx.
\preformatted{
output_1:
  type: TBL
  title: "Caption of the output 1"
  file: ~
  widths: ~
  occurrence: ~
output_2:
  type: FIG
  title: "Caption of the output 2"
  file: ~
  widths: ~
  occurrence: ~
  }}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{uo <- ReplaceOutputs$new(
   template_docx_filename = system.file("use_cases/02_automated_reporting",
                                        "Automated_Reporting_Example.docx",
                                        package="rdocx"),
   outputs_path = system.file("use_cases/02_automated_reporting/example_outputs",
                              package="rdocx"),
   doc_final_filename = "./test.docx"
 )
uo$get_captions_to_yml(yml_caption_filename="./test_yml.yml")

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReplaceOutputs-update_all_outputs"></a>}}
\if{latex}{\out{\hypertarget{method-ReplaceOutputs-update_all_outputs}{}}}
\subsection{Method \code{update_all_outputs()}}{
Update all outputs.
It iterates through all the outputs in the yml file, and assigns them in the
correct location in the updated docx.
If no "file" param given (NA or NULL), it will skip the output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReplaceOutputs$update_all_outputs()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{uo <- ReplaceOutputs$new(
   template_docx_filename = system.file("use_cases/02_automated_reporting",
                                        "Automated_Reporting_Example.docx",
                                        package="rdocx"),
   outputs_path = system.file("use_cases/02_automated_reporting/example_outputs",
                              package="rdocx"),
   doc_final_filename = "./test.docx",
   yml_filename = system.file("use_cases/02_automated_reporting",
                              "example_yml_1.yml",
                              package="rdocx")
 )
uo$update_all_outputs()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReplaceOutputs-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ReplaceOutputs-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReplaceOutputs$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
